/*
 * WARNING
 *
 * This file is maintained automatically by Bndtools.
 * You should not edit it directly. Instead, put overrides and extras that
 * should be applied to the root project and/or all included projects into
 * the "build-custom.gradle" file. Overrides and extras that should
 * be applied to individual projects should be placed in a "build.gradle" file
 * in the root directory of that project.
 *
 * This file will:
 * - Define some default variables for all included projects, see the
 *   "allprojects" block
 * - Apply the bnd build setup to all included bnd projects, see the
 *   "subprojects" block
 */


import aQute.bnd.ant.ConsoleProgress
import aQute.bnd.build.Container
import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Builder
import aQute.bnd.osgi.Constants


logging.captureStandardOutput   LogLevel.INFO
logging.level                 = LogLevel.INFO


/* Setup the build dependencies */
buildscript {
  dependencies {
    classpath rootProject.ext.bnd_buildDependencies
  }
}


/* Determine which files will be included in the bundles of a project */
FileTree getBundleInputFiles(Project project) {
  FileTree tree = project.fileTree(project.projectDir)
                    .exclude("$project.ext.bnd_srcDir/**"       )
                    .exclude("$project.ext.bnd_srcBinDir/**"    )
                    .exclude("$project.ext.bnd_testSrcDir/**"   )
                    .exclude("$project.ext.bnd_testSrcBinDir/**")
                    .exclude("$project.ext.bnd_targetDir/**"    )

  FileTree includedResources = project.fileTree(project.projectDir)
                                 .include("$project.ext.bnd_srcBinDir/**")
  project.ext.bnd_project.subBuilders.each { Builder subBuilder ->
    tree.each { File f ->
      if (!includedResources.contains(f) && subBuilder.isInScope([f])) {
        includedResources.include(project.relativePath(f))
      }
    }
  }

  return includedResources
}


/* Determine which files are generated by the bundle task of a project */
FileTree getBundleOutputFiles(Project project) {
  Set<String> bundleOutputs = new HashSet<String>()
  project.ext.bnd_project.subBuilders.each { Builder subBuilder ->
    bundleOutputs.add(project.relativePath(project.ext.bnd_project.getOutputFile(subBuilder.bsn)))
  }

  bundleOutputs.add("$project.ext.bnd_targetDir/buildfiles")

  return project.fileTree(project.projectDir).include(bundleOutputs)
}


/*
 * Get a property from the project's flattened bnd properties.
 * Returns an empty string when the property is not set unless instructed to
 * throw an exception when the property is not set.
 */
String getBndProjectProperty(Project project, String key, boolean throwOnNotSet) {
  String p = project.ext.bnd_flattenedProperties.getProperty(key, null)
  if (p == null) {
    if (throwOnNotSet) {
      throw new GradleException("Bnd property $key not found in project $project.name")
    }
    p = ""
  }
  return p.trim()
}


/* Convert a bnd (class)path to a gradle file collection */
List<File> bndPathToFileList(Project project, Collection<Container> path) {
  List<File> files = new LinkedList<File>()
  if (path != null) {
    path.each {
      File f = it.getFile()
      if (!files.contains(f)) {
        files.add(f)
      }
    }
  }

  return files
}


/* Convert a list of files into a (class)path string for use on the CLI */
String fileListToCliPath(List<File> files) {
  StringBuilder sb = new StringBuilder()
  if (files != null) {
    for (File f : files) {
      if (sb.length() > 0) {
        sb.append(":")
      }
      sb.append(f.getPath())
    }
  }
  return sb.toString()
}


/* Print bnd project warnings and errors and exit when errors are not allowed */
void printBndProjectWarningsAndErrors(Project project) {
  project.ext.bnd_project.getWarnings().each {
    logger.warn  "Warning: " + it
  }
  project.ext.bnd_project.getErrors().each {
    logger.error "Error  : " + it
  }
  if (!project.ext.bnd_project.isOk()) {
    throw new GradleException("Errors were reported.")
  }
}


/* Initialise the bnd workspace */
Workspace workspace = Workspace.getWorkspace(rootProject.rootDir)
if (workspace == null) {
  throw new GradleException("No bnd workspace found")
}
workspace.addBasicPlugin(new ConsoleProgress());


/* Setup some default project properties, mainly applicable for java projects */
allprojects { project ->
  project.ext.bnd_srcDir             = project.relativePath(Workspace.getDefaults().getProperty(Constants.DEFAULT_PROP_SRC_DIR))
  project.ext.bnd_srcBinDir          = project.relativePath(Workspace.getDefaults().getProperty(Constants.DEFAULT_PROP_BIN_DIR))
  project.ext.bnd_testSrcDir         = project.relativePath(Workspace.getDefaults().getProperty(Constants.DEFAULT_PROP_TESTSRC_DIR))
  project.ext.bnd_testSrcBinDir      = project.relativePath(Workspace.getDefaults().getProperty(Constants.DEFAULT_PROP_TESTBIN_DIR))
  project.ext.bnd_targetDir          = project.relativePath(Workspace.getDefaults().getProperty(Constants.DEFAULT_PROP_TARGET_DIR))

  project.ext.bnd_buildDir           = project.ext.bnd_targetDir
  project.ext.bnd_libsDirName        = "."
  project.ext.bnd_testResultsDirName = "reports/tests/xml"
  project.ext.bnd_testReportDirName  = "tests/html"
}


/* Setup the root project */
rootProject.buildDir = rootProject.ext.bnd_buildDir


/* Create a gradle wrapper */
task wrapper(type: Wrapper) {
  description     "Download Gradle and generate wrapper scripts."
  group           "Build Setup"

  gradleVersion = rootProject.ext.bnd_buildProperties["gradle.version"]
  jarFile       = rootProject.file(".gradle-wrapper/gradle-wrapper.jar")
}


/* Setup the bnd projects */
subprojects { project ->
  project.ext.bnd_project = workspace.getProject(project.projectDir)
  if (project.ext.bnd_project != null) {
    /* This is a bnd project, apply bnd build setup */

    project.ext.bnd_project.prepare()
    if (!project.ext.bnd_project.isValid()) {
      throw new GradleException("Project $project is not a valid bnd project")
    }

    apply plugin: "java"
    defaultTasks  "bundle"

    /* Flatten all bnd project properties */
    project.ext.bnd_flattenedProperties        = project.ext.bnd_project.getFlattenedProperties()

    /* Source and output directory settings */
    project.ext.bnd_srcDir                     = project.relativePath(project.ext.bnd_project.getSrc()       )
    project.ext.bnd_srcBinDir                  = project.relativePath(project.ext.bnd_project.getSrcOutput() )
    project.ext.bnd_testSrcDir                 = project.relativePath(project.ext.bnd_project.getTestSrc()   )
    project.ext.bnd_testSrcBinDir              = project.relativePath(project.ext.bnd_project.getTestOutput())
    project.ext.bnd_targetDir                  = project.relativePath(project.ext.bnd_project.getTargetDir() )
    project.ext.bnd_buildDir                   = project.ext.bnd_targetDir
    project.ext.bnd_exportDir                  = "$project.ext.bnd_targetDir/export"
    project.ext.bnd_javadocDir                 = "$project.ext.bnd_targetDir/javadoc"

    /* Setup the bnd project layout */
    apply from: rootProject.file("$rootProject.ext.bnd_cnf/gradle/build-bndLayout.gradle")

    /* Global settings */
    project.ext.bnd_releaseRepo                =                      getBndProjectProperty(project, Constants.RELEASEREPO, false)
    project.ext.bnd_verbose                    = Boolean.parseBoolean(getBndProjectProperty(project, Constants.VERBOSE    , false))
    project.ext.bnd_runFiles                   = project.fileTree(project.projectDir).include("*.bndrun")

    /*
     * Setup classpaths
     */

    project.ext.bnd_classPath                  = bndPathToFileList(project, project.ext.bnd_project.getBuildpath()    )
    project.ext.bnd_classPathBoot              = bndPathToFileList(project, project.ext.bnd_project.getBootclasspath())
    project.ext.bnd_classPathTest              = bndPathToFileList(project, project.ext.bnd_project.getTestpath()     )
    project.ext.bnd_classPathRun               = bndPathToFileList(project, project.ext.bnd_project.getRunpath()      )

    dependencies.add("compile"    , project.files(project.ext.bnd_classPath    ))
    dependencies.add("testCompile", project.files(project.ext.bnd_classPathTest))

    if (!project.ext.bnd_classPathBoot.isEmpty()) {
      def bootClassPath = fileListToCliPath(project.ext.bnd_classPathBoot)
      compileJava.options.compilerArgs        += ["-Xbootclasspath/p:$bootClassPath"]
      compileTestJava.options.compilerArgs    += ["-Xbootclasspath/p:$bootClassPath"]
    }

    /*
     * Setup java compiler options
     */

    project.ext.bnd_java                       =                      getBndProjectProperty(project, "java"        , true )
    project.ext.bnd_javac                      =                      getBndProjectProperty(project, "javac"       , true )
    project.ext.bnd_javac_source               =                      getBndProjectProperty(project, "javac.source", true )
    project.ext.bnd_javac_target               =                      getBndProjectProperty(project, "javac.target", true )
    project.ext.bnd_debug                      = Boolean.parseBoolean(getBndProjectProperty(project, "javac.debug" , false))

    project.sourceCompatibility                = project.ext.bnd_javac_source
    if (project.ext.bnd_javac_target ==~ "^\\d+\\.\\d+\$") {
      project.targetCompatibility              = project.ext.bnd_javac_target
    } else {
      compileJava.options.compilerArgs        += ["-target", project.ext.bnd_javac_target]
    }
    compileJava.options.debug                  = project.ext.bnd_debug
    compileJava.options.verbose                = false
    compileJava.options.listFiles              = project.ext.bnd_verbose
    compileJava.options.fork                   = true
    compileJava.options.deprecation            = true
    compileJava.options.forkOptions.setExecutable(project.ext.bnd_javac)

    compileTestJava.options.debug              = project.ext.bnd_debug
    compileTestJava.options.verbose            = false
    compileTestJava.options.listFiles          = project.ext.bnd_verbose
    compileTestJava.options.fork               = true
    compileTestJava.options.deprecation        = true
    compileTestJava.options.forkOptions.setExecutable(project.ext.bnd_javac)

    /*
     * Setup test options
     */

    test.enableAssertions                      = true
    test.ignoreFailures                        = false
    test.maxParallelForks                      = 1

    /*
     * Setup javadoc options
     */

    javadoc.destinationDir                     = project.file(project.ext.bnd_javadocDir)
    javadoc.failOnError                        = true
    javadoc.maxMemory                          = "256M"
    javadoc.source                             = project.sourceSets.main.allJava
    javadoc.title                              = "$project.name"
    javadoc.verbose                            = false

    project.configure(javadoc.options) {
      bootClasspath                            = project.ext.bnd_classPathBoot
      memberLevel                              = "PRIVATE"
      windowTitle                              = "$project.name"
      author                                   = true
      breakIterator                            = true
      docFilesSubDirs                          = true
      docTitle                                 = "$project.name"
      encoding                                 = "UTF-8"
      noComment                                = false
      noDeprecated                             = false
      noDeprecatedList                         = false
      noHelp                                   = false
      noIndex                                  = false
      noNavBar                                 = false
      noSince                                  = false
      noTimestamp                              = false
      noTree                                   = false
      source                                   = "$project.ext.bnd_javac_source"
      splitIndex                               = true
      use                                      = true
      version                                  = true
    }

    /*
     * Setup tasks
     */

    task bundle {
      description   "Assemble OSGi bundle(s) with bnd."
      group         "Build"
      inputs.files  { getBundleInputFiles (project) }
      outputs.files { getBundleOutputFiles(project) }

      doFirst {
        try {
          project.file(project.ext.bnd_targetDir).mkdirs()
          project.ext.bnd_project.build()
          printBndProjectWarningsAndErrors(project)
        } catch (Exception e) {
          throw new GradleException("Assembling OSGi bundles for $project.name failed: " + e.getMessage())
        }
      }
    }

    task release {
      description  "Release this project into the release repository."
      group        "Build"
      inputs.files { getBundleOutputFiles(project) }

      doFirst {
        try {
          project.ext.bnd_project.release("$project.ext.bnd_releaseRepo", false)
          printBndProjectWarningsAndErrors(project)
        } catch (Exception e) {
          throw new GradleException("Releasing $project.name failed: " + e.getMessage())
        }
      }
    }

    task releaseNeeded {
      description "Release this project and all projects it depends on into the release repository."
      group       "Build"
    }

    task export {
      description   "Export all bndrun files in the project directory to runable jars."
      group         "Build"
      inputs.files  { project.ext.bnd_runFiles + getBundleOutputFiles(project) }
      outputs.files { project.fileTree(project.projectDir).include("$project.ext.bnd_exportDir/*.jar") }

      doFirst {
        project.file(project.ext.bnd_exportDir).mkdirs()
        project.ext.bnd_runFiles.each { File f ->
          String runFile = project.relativePath(f)
          String jarFile = runFile.replaceAll("\\.bndrun\$", ".jar")
          try {
            project.ext.bnd_project.export(runFile, false, project.file("$project.ext.bnd_exportDir/$jarFile"))
            printBndProjectWarningsAndErrors(project)
          } catch (Exception e) {
            throw new GradleException("Exporting $runFile for $project.name failed: " + e.getMessage())
          }
        }
      }
    }

    task exportNeeded {
      description "Export this project and all projects it depends on."
      group       "Build"
    }

    task bundleTest {
      description  "Run OSGi test(s) with bnd."
      group        "Verification"
      inputs.files { getBundleOutputFiles(project) }

      doFirst {
        try {
          project.ext.bnd_project.test()
          printBndProjectWarningsAndErrors(project)
        } catch (Exception e) {
          throw new GradleException("Running OSGi test(s) for $project.name failed: " + e.getMessage())
        }
      }
    }

    clean.doLast {
       project.file(project.ext.bnd_srcBinDir).deleteDir()
       project.file(project.ext.bnd_testSrcBinDir).deleteDir()
       project.file(project.ext.bnd_targetDir).deleteDir()
    }

    task cleanNeeded {
      description "Clean this project and all projects it depends on."
      group       "Build"
    }

    task bndproperties {
      description "Show the bnd project properties."
      group       "Help"

      doFirst {
        println ""
        println "============================================================="
        println "= Properties of $name"
        println "============================================================="

        def maxLength = 0
        project.ext.bnd_flattenedProperties.each {
          def propertyNameLength = it.getKey().length()
          if (propertyNameLength > maxLength) {
            maxLength = propertyNameLength
          }
        }

        def lines = []
        project.ext.bnd_flattenedProperties.each {
          lines << String.format("%-" + maxLength + "s = %s", it.getKey(), it.getValue())
        }

        lines.sort({ s1, s2 -> return s1.toLowerCase().compareTo(s2.toLowerCase())}).each {
          println it
        }
        println ""
      }
    }


    /*
     * Setup task dependencies
     */

    jar.enabled                  = false

    bundle.dependsOn            += [classes   ]
    jar.dependsOn               += [bundle    ]
    release.dependsOn           += [bundle    ]
    releaseNeeded.dependsOn     += [release   ]
    export.dependsOn            += [bundle    ]
    exportNeeded.dependsOn      += [export    ]
    bundleTest.dependsOn        += [bundle    ]
    test.dependsOn              += [bundle    ]
    check.dependsOn             += [bundleTest]
    cleanNeeded.dependsOn       += [clean     ]


    project.ext.bnd_project.getDependson().each {
      compileJava.dependsOn   += [":" +  it.name + ":bundle"       ]
      releaseNeeded.dependsOn += [":" +  it.name + ":releaseNeeded"]
      exportNeeded.dependsOn  += [":" +  it.name + ":exportNeeded" ]
      cleanNeeded.dependsOn   += [":" +  it.name + ":cleanNeeded"  ]
    }

    /*
     * Setup task skipping
     */

    project.ext.bnd_noJunit1       = Boolean.parseBoolean(getBndProjectProperty(project, Constants.NOJUNIT    , false))
    project.ext.bnd_noJunit2       = Boolean.parseBoolean(getBndProjectProperty(project, "no.junit"           , false))
    project.ext.bnd_testCases      =                      getBndProjectProperty(project, Constants.TESTCASES  , false)
    project.ext.bnd_noJunitOsgi    = Boolean.parseBoolean(getBndProjectProperty(project, Constants.NOJUNITOSGI, false))
    project.ext.bnd_noBundles      = project.ext.bnd_project.isNoBundles()

    project.ext.bnd_doBundle       = !project.ext.bnd_noBundles
    project.ext.bnd_doRelease      = !project.ext.bnd_releaseRepo.isEmpty()
    project.ext.bnd_doJUnitTests   = !(project.ext.bnd_noJunit1    || project.ext.bnd_noJunit2)
    project.ext.bnd_doBundleTests  = !(project.ext.bnd_noJunitOsgi || project.ext.bnd_testCases.isEmpty())


    bundle.onlyIf                    { project.ext.bnd_doBundle      }
    release.onlyIf                   { project.ext.bnd_doRelease     }
    test.onlyIf                      { project.ext.bnd_doJUnitTests  }
    bundleTest.onlyIf                { project.ext.bnd_doBundleTests }
  }
}
